server:
  port: 8080
feign:
  hystrix:
    enabled: true
hystrix:
  command:
    default:
      execution.isolation.thread.timeoutInMilliseconds: 500
spring:
  application:
    name: rent
---

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  # jpa:
  #   hibernate:
  #     naming:
  #       physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  #     ddl-auto: update
  #   properties:
  #     hibernate:
  #       show_sql: true
  #       format_sql: true
  #       dialect: org.hibernate.dialect.MySQL57Dialect
  # datasource:
  #   url: jdbc:mysql://${_DATASOURCE_ADDRESS:35.221.110.118:3306}/${_DATASOURCE_TABLESPACE:my-database}
  #   username: ${_DATASOURCE_USERNAME:root1}
  #   password: ${_DATASOURCE_PASSWORD:secretpassword}
  #   driverClassName: com.mysql.cj.jdbc.Driver
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: rent
          destination: team
          contentType: application/json
        event-out:
          destination: team
          contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url:
    renthouse: localhost:8084

server:
  port: 8083

---

spring:
  profiles: docker
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: rent
          destination: team
          contentType: application/json
        event-out:
          destination: team
          contentType: application/json

api:
  url:
    renthouse: renthouse:8080

